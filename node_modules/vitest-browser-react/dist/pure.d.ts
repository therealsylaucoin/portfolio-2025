import { LocatorSelectors, Locator } from '@vitest/browser/context';
import { PrettyDOMOptions } from '@vitest/browser/utils';
import React from 'react';

interface RenderResult extends LocatorSelectors {
    container: HTMLElement;
    baseElement: HTMLElement;
    debug: (el?: HTMLElement | HTMLElement[] | Locator | Locator[], maxLength?: number, options?: PrettyDOMOptions) => void;
    unmount: () => void;
    rerender: (ui: React.ReactNode) => void;
    asFragment: () => DocumentFragment;
}
interface ComponentRenderOptions {
    container?: HTMLElement;
    baseElement?: HTMLElement;
    wrapper?: React.JSXElementConstructor<{
        children: React.ReactNode;
    }>;
}
declare function render(ui: React.ReactNode, { container, baseElement, wrapper: WrapperComponent }?: ComponentRenderOptions): RenderResult;
declare function cleanup(): void;
interface RenderConfiguration {
    reactStrictMode: boolean;
}
declare function configure(customConfig: Partial<RenderConfiguration>): void;

export { type ComponentRenderOptions, type RenderConfiguration, type RenderResult, cleanup, configure, render };
